generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "postgresql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Role {
    CUSTOMER
    ADMIN
}

enum Gender {
    MEN
    WOMEN
    BOYS
    GIRLS
}

enum StockStatus {
    AVAILABLE
    LIMITED_STOCK
    OUT_OF_STOCK
}

enum OrderStatus {
    PENDING
    PAID
    CANCELLED
    FULFILLMENT_IN_PROGRESS
    FULFILLED
    COMPLETED
    PARTIALLY_RETURNED
    RETURNED
}

enum AddressType {
    HOME
    OFFICE
}

model CustomerAddress {
    id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    customer    Profile     @relation(fields: [customerId], references: [id])
    customerId  String      @db.Uuid
    firstName   String
    lastName    String
    mobile      String      @unique
    line1       String
    line2       String
    district    String
    state       String
    pinCode     String
    addressType AddressType @default(HOME)
    default     Boolean
    Order       Order[]
}

model Profile {
    id   String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    role Role   @default(CUSTOMER)

    firstName       String?
    lastName        String?
    mobile          String?           @unique
    email           String?           @unique
    wishlistItems   WishlistItem[]
    cartItems       CartItem[]
    ContactUs       ContactUs[]
    orders          Order[]
    CustomerAddress CustomerAddress[]
}

model Item {
    id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    title       String
    description String
    price       Float       @default(0)
    stockStatus StockStatus @default(AVAILABLE)
    gender      Gender[]    @default([MEN, WOMEN])
    hasVariants Boolean     @default(false)

    images        Json           @default("[]")
    wishlistItems WishlistItem[]
    cartItems     CartItem[]
    variants      ItemVariant[]

    category   Category    @relation(fields: [categoryId], references: [id])
    categoryId String      @db.Uuid
    OrderItem  OrderItem[]
}

model ItemVariant {
    id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    item        Item        @relation(fields: [itemId], references: [id])
    itemId      String      @db.Uuid
    stockStatus StockStatus @default(AVAILABLE)

    title  String
    price  Float  @default(0)
    images Json   @default("[]")

    attributeValues VariantAttributeValue[]
    CartItem        CartItem[]
}

model VariantAttributeValue {
    id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

    variant   ItemVariant @relation(fields: [variantId], references: [id])
    variantId String      @db.Uuid

    attribute   ItemAttribute @relation(fields: [attributeId], references: [id])
    attributeId String        @db.Uuid

    attributeValue   ItemAttributeValue @relation(fields: [attributeValueId], references: [id])
    attributeValueId String             @db.Uuid
}

model ItemAttribute {
    id                    String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name                  String
    description           String?
    ItemAttributeValues   ItemAttributeValue[]
    VariantAttributeValue VariantAttributeValue[]
}

model ItemAttributeValue {
    id                    String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    attribute             ItemAttribute           @relation(fields: [attributeId], references: [id])
    attributeId           String                  @db.Uuid
    value                 String
    VariantAttributeValue VariantAttributeValue[]
}

model Category {
    id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name        String
    description String?
    gender      Gender[] @default([MEN, WOMEN])

    parentCategoryId String?    @db.Uuid()
    parentCategory   Category?  @relation("ParentCategory", fields: [parentCategoryId], references: [id])
    subcategories    Category[] @relation("ParentCategory")

    items Item[]
}

model WishlistItem {
    id         String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    item       Item    @relation(fields: [itemId], references: [id])
    itemId     String  @db.Uuid
    customer   Profile @relation(fields: [customerId], references: [id])
    customerId String  @db.Uuid
}

model CartItem {
    id         String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    item       Item         @relation(fields: [itemId], references: [id])
    itemId     String       @db.Uuid
    customer   Profile      @relation(fields: [customerId], references: [id])
    customerId String       @db.Uuid
    qty        Int
    variant    ItemVariant? @relation(fields: [variantId], references: [id])
    variantId  String?      @db.Uuid
}

model Order {
    id              String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    dateTime        DateTime        @default(now())
    totalPrice      Float
    status          OrderStatus     @default(PENDING)
    customer        Profile         @relation(fields: [customerId], references: [id])
    customerId      String          @db.Uuid
    shippingAddress CustomerAddress @relation(fields: [addressId], references: [id])
    addressId       String          @db.Uuid
    orderItems      OrderItem[]
    payments        Payment[]
    fulfillment     Fulfillment[]
}

model OrderItem {
    id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    price           Float
    qty             Int
    order           Order            @relation(fields: [orderId], references: [id])
    orderId         String           @db.Uuid
    item            Item             @relation(fields: [itemId], references: [id])
    itemId          String           @db.Uuid
    FulfillmentItem FulfillmentItem?
}

model Payment {
    id       String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    order    Order    @relation(fields: [orderId], references: [id])
    orderId  String   @unique @db.Uuid
    dateTime DateTime @default(now())

    paymentGateway    String
    paymentGatewayRef String
    moreDetails       String

    currency String
    amount   Float
    status   String
}

model Fulfillment {
    id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    order           Order             @relation(fields: [orderId], references: [id])
    orderId         String            @db.Uuid
    status          String
    tracking        String?
    dateTime        DateTime          @default(now())
    FulfillmentItem FulfillmentItem[]
}

model FulfillmentItem {
    id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    fulfillment   Fulfillment @relation(fields: [fulfillmentId], references: [id])
    fulfillmentId String      @db.Uuid
    orderItem     OrderItem   @relation(fields: [orderItemId], references: [id])
    orderItemId   String      @unique @db.Uuid
    quantity      Int         @default(1)
    status        String
}

model ContactUs {
    id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    type       String?
    name       String?
    email      String?
    mobile     String?
    message    String?
    customer   Profile? @relation(fields: [customerId], references: [id])
    customerId String?  @db.Uuid
}
